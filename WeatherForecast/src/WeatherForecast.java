
import static java.awt.Color.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;



/**
 * @author Jasen Ratnam 1622549
 */
public class WeatherForecast extends javax.swing.JFrame {

    /**
     * Creates new form WeatherForecast
     */
    public WeatherForecast() {
        initComponents();
        getContentPane().setBackground(gray);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title_Label = new javax.swing.JLabel();
        DegreesTextField = new javax.swing.JTextField();
        Degrees_Label = new javax.swing.JLabel();
        Precipitations_CheckBox = new javax.swing.JCheckBox();
        Night_CheckBox = new javax.swing.JCheckBox();
        Fahrenheit_CheckBox = new javax.swing.JCheckBox();
        SetIcon_Button = new javax.swing.JButton();
        TodaysWeather_Button = new javax.swing.JButton();
        Message_Label = new javax.swing.JLabel();
        Weather_Icon = new weatherforecast.ImagePanel();
        Copyright_Label = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Title_Label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Title_Label.setText("Weather Forecast");
        Title_Label.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Title_Label.setHorizontalAlignment(SwingConstants.CENTER);
        Title_Label.setVerticalAlignment(SwingConstants.CENTER);

        Degrees_Label.setText("Degrees");

        Precipitations_CheckBox.setText("Precipitations?");
        Precipitations_CheckBox.setBackground(gray);

        Night_CheckBox.setText("Night?");
        Night_CheckBox.setBackground(gray);

        Fahrenheit_CheckBox.setText("Fahrenheit?");
        Fahrenheit_CheckBox.setBackground(gray);

        SetIcon_Button.setText("Set Icon");
        SetIcon_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetIcon_ButtonActionPerformed(evt);
            }
        });
        SetIcon_Button.setBackground(white);

        TodaysWeather_Button.setText("Today's weather");
        TodaysWeather_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TodaysWeather_ButtonActionPerformed(evt);
            }
        });
        TodaysWeather_Button.setBackground(white);

        Message_Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Message_Label.setText("Please enter degrees and choose selection.");
        Message_Label.setHorizontalAlignment(SwingConstants.CENTER);
        Message_Label.setVerticalAlignment(SwingConstants.CENTER);

        javax.swing.GroupLayout Weather_IconLayout = new javax.swing.GroupLayout(Weather_Icon);
        Weather_Icon.setLayout(Weather_IconLayout);
        Weather_IconLayout.setHorizontalGroup(
            Weather_IconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 136, Short.MAX_VALUE)
        );
        Weather_IconLayout.setVerticalGroup(
            Weather_IconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 139, Short.MAX_VALUE)
        );

        Copyright_Label.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        Copyright_Label.setText("Â©Jasen Ratnam 1622549");

        FileMenu.setText("File");
        MenuBar.add(FileMenu);
        JMenuItem quitItem = new JMenuItem("Quit");
        quitItem.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
                dispatchEvent(new WindowEvent(WeatherForecast.this, WindowEvent.WINDOW_CLOSING));
            }
        });
        quitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_MASK));
        FileMenu.add(quitItem);

        JMenuItem OverrideItem = new JMenuItem("Override icon");
        OverrideItem.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {

                try
                {
                    JFileChooser openFile = new JFileChooser();
                    openFile.setCurrentDirectory(new File("./images"));
                    String[] imageFormats = new String[] {"jpg","jpeg", "bmp","png"};
                    FileFilter filter = new FileNameExtensionFilter("Image file", imageFormats);

                    openFile.setFileFilter(filter);
                    openFile.addChoosableFileFilter(filter);

                    if(openFile.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
                    {
                        String filename = openFile.getSelectedFile().getPath();

                        Weather_Icon.setImage(filename);

                        Message_Label.setText("Icon has been overriden.");
                    }
                    else
                    {
                        Message_Label.setText("Overriding command cancelled by user.");
                    }
                }
                catch(Exception e)
                {
                    Message_Label.setText("Error opening file...");
                }

            }
        });
        OverrideItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK));
        FileMenu.add(OverrideItem);

        setJMenuBar(MenuBar);
        MenuBar.setBackground(red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(SetIcon_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(DegreesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Degrees_Label))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Night_CheckBox)
                                            .addComponent(Precipitations_CheckBox)
                                            .addComponent(Fahrenheit_CheckBox))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TodaysWeather_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Weather_Icon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Message_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Title_Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Copyright_Label)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Title_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Degrees_Label)
                            .addComponent(DegreesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Precipitations_CheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(Night_CheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(Fahrenheit_CheckBox))
                    .addComponent(Weather_Icon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SetIcon_Button)
                    .addComponent(TodaysWeather_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Message_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Copyright_Label))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SetIcon_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetIcon_ButtonActionPerformed
        if(isInteger(DegreesTextField.getText()))
        {
            setWeatherMessage();
            set_Icon();
        }
        else
        {
            Message_Label.setText("Please enter an integer for Degrees.");
        }
    }//GEN-LAST:event_SetIcon_ButtonActionPerformed

    private void TodaysWeather_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TodaysWeather_ButtonActionPerformed
        todaysWeather();
    }//GEN-LAST:event_TodaysWeather_ButtonActionPerformed

    public boolean isInteger( String input )
    {
       try
       {
          Integer.parseInt( input );
          return true;
       }
       catch( NumberFormatException e)
       {
          Weather_Icon.setImage("images/error.png");
          return false;
       }
    }
    private void set_Icon()
    {
        try
        {
            if(Night_CheckBox.isSelected() == false && Precipitations_CheckBox.isSelected() == false)
            {
                Weather_Icon.setImage("images/clear.png");
            }
            else if(Night_CheckBox.isSelected() && Precipitations_CheckBox.isSelected() == false)
            {
                Weather_Icon.setImage("images/clear_night.png");
            }
            else if(Night_CheckBox.isSelected() == false && Precipitations_CheckBox.isSelected() && Fahrenheit_CheckBox.isSelected() && Integer.parseInt(DegreesTextField.getText()) > 32)
            {
                Weather_Icon.setImage("images/raining.png");
            }
            else if(Night_CheckBox.isSelected() == false && Precipitations_CheckBox.isSelected() && Fahrenheit_CheckBox.isSelected() && Integer.parseInt(DegreesTextField.getText()) <= 32)
            {
                Weather_Icon.setImage("images/snowing.png");
            }
            else if(Night_CheckBox.isSelected() == false && Precipitations_CheckBox.isSelected() && Fahrenheit_CheckBox.isSelected() == false && Integer.parseInt(DegreesTextField.getText()) > 0)
            {
                Weather_Icon.setImage("images/raining.png");
            }
            else if(Night_CheckBox.isSelected() == false && Precipitations_CheckBox.isSelected() && Fahrenheit_CheckBox.isSelected() == false && Integer.parseInt(DegreesTextField.getText()) <= 0)
            {
                Weather_Icon.setImage("images/snowing.png");
            }
            else if(Night_CheckBox.isSelected() && Precipitations_CheckBox.isSelected() && Fahrenheit_CheckBox.isSelected() && Integer.parseInt(DegreesTextField.getText()) > 32)
            {
                Weather_Icon.setImage("images/raining_night.png");
            }
            else if(Night_CheckBox.isSelected() && Precipitations_CheckBox.isSelected() && Fahrenheit_CheckBox.isSelected() && Integer.parseInt(DegreesTextField.getText()) <= 32)
            {
                Weather_Icon.setImage("images/snowing_night.png");
            }
            else if(Night_CheckBox.isSelected() && Precipitations_CheckBox.isSelected() && Fahrenheit_CheckBox.isSelected() == false && Integer.parseInt(DegreesTextField.getText()) > 0)
            {
                Weather_Icon.setImage("images/raining_night.png");
            }
            else if(Night_CheckBox.isSelected() && Precipitations_CheckBox.isSelected() && Fahrenheit_CheckBox.isSelected() == false && Integer.parseInt(DegreesTextField.getText()) <= 0)
            {
                Weather_Icon.setImage("images/snowing_night.png");
            }
        }
        catch(NumberFormatException e)
        {
            Message_Label.setText("ERROR: Formatting the entered degrees.");
            Weather_Icon.setImage("images/error.png");
        }
    }
    
    private void setWeatherMessage()
    {
        String weather = "";
        if(Night_CheckBox.isSelected())
        {
            weather += "Tonight ";
        }
        else
        {
            weather += "Today ";
        }
        
        weather += "is ";
        
        if(Precipitations_CheckBox.isSelected())
        {
            if(Fahrenheit_CheckBox.isSelected())
            {
                if(Integer.parseInt(DegreesTextField.getText()) <= 32)
                {
                    weather += "snowing ";
                } 
                else if (Integer.parseInt(DegreesTextField.getText()) > 32)
                {
                    weather += "raining ";
                }
            }
            else
            {
                if(Integer.parseInt(DegreesTextField.getText()) <= 0)
                {
                    weather += "snowing ";
                } 
                else if(Integer.parseInt(DegreesTextField.getText()) > 0)
                {
                    weather += "raining ";
                }
            } 
        }
        else
        {
            weather += "clear sky ";
        }
        
        weather += "with a temperature of " + DegreesTextField.getText() + " ";
        
        if(Fahrenheit_CheckBox.isSelected())
        {
            weather += "Â°" + "F.";
        }
        else
        {
            weather += "Â°" + "C.";
        }
        
        Message_Label.setText(weather);
    }
    
    private void todaysWeather()
    {
        Message_Label.setText("Today is clear sky with a temperature of 14 Â°C.");
        Weather_Icon.setImage("images/clear.png");
        Night_CheckBox.setSelected(false);
        Precipitations_CheckBox.setSelected(false);
        Fahrenheit_CheckBox.setSelected(false);
        DegreesTextField.setText("14");
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WeatherForecast().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Copyright_Label;
    private javax.swing.JTextField DegreesTextField;
    private javax.swing.JLabel Degrees_Label;
    private javax.swing.JCheckBox Fahrenheit_CheckBox;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel Message_Label;
    private javax.swing.JCheckBox Night_CheckBox;
    private javax.swing.JCheckBox Precipitations_CheckBox;
    private javax.swing.JButton SetIcon_Button;
    private javax.swing.JLabel Title_Label;
    private javax.swing.JButton TodaysWeather_Button;
    private weatherforecast.ImagePanel Weather_Icon;
    // End of variables declaration//GEN-END:variables
}
